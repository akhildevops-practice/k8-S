 DAY-41 | KUBERNETES LIVE PROJECT | CONFIGMAPS & SECRETS | HOW TO USE CONFIGMAPS & SECRETS INSIDE POD

1. What is a Kubernetes ConfigMap ?
2. What is a Kubernetes Secret ?
3. Difference between ConfigMap & Secret ?
4. How to use ConfigMap data as ENV Vars inside a Django Python Container ?
5. How to use Configmap data as Volume Mount file inside a Django Python container App ?
6. What are the advantages of using a Volume Mount over Env var for reading ConfigMap in Kubernetes ?
7. Interview Questions related to Secrets in Kubernetes ?
8. Much more.

Config Map is used to storing the information that is used by application later point of time. In docker we use dockerfile to use env varibles, in k8's dockerfile isn't supported, we use config map in k8's to store env variables.


Secrets also solves the same problem, difference is here we save the sensitive information, such as db password, ports etc.
But when we create a resource in k8's the information regarding to resource store in etcd, by this hacker can enter the application and we got no security to app. In etcd everything will store as objects.
When we use secrets the data stored in secrets will be encrypted before it goes to etcd, k8's uses a basic encryption here we have an option to encrypt using custom.

In k8's we use deployment.yaml, with configmap, it sends to etcd through api, here there is a chance that hacker can get the info stored in configmap using kubectl describe or edit configmap or etcd. Here security is compromised.

Secrets solves 2 problems:
1. The problem can be solved by using RBAC only DevOps Engineers can have access to secrets. ( least privilege principle)
2. etcd Rest encryption.


Demo

1. vim cm.yml

+++++++++++++++++++++++++++++++++++++++++++++++++++++++

apiVersion: v1
kind: ConfigMap
metadata:
  name: test-cm
data:
  db-port: "3306"



++++++++++++++++++++++++++++++++++++++++++++++++++++++++
we use kubectl apply... over kuberctl create...
Because when apply cmd is used, we can simply kubectl edit... the concerned files, without applying again.
In kubectl create..., you can't use use kubectl edit, you need to manually change the YAML and and create again.


clone docker-zero-to-hero repo.
cd examples/pythonweb-app

change the dockerfile according to our system 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

FROM ubuntu

WORKDIR /app

COPY requirements.txt /app
COPY devops /app

RUN apt-get update && \
    apt-get install -y python3 python3-pip && \
    pip install --break-system-packages -r requirements.txt && \
    cd devops

ENTRYPOINT ["python3"]
CMD ["manage.py", "runserver", "0.0.0.0:8000"]

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



Labels: Key-value pairs attached to Kubernetes objects (like Pods or Services) for categorizing and identifying them. For example, a Pod might have a label app=nginx.

Selectors: Mechanisms for grouping and managing Kubernetes objects based on their labels. Selectors use these labels to match and interact with specific sets of objects. For example, a Deployment uses a selector app=nginx to manage Pods with that label.


vim deployment.yml

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sample-python-app
  labels:
    app: sample-python-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: sample-python-app
  template:
    metadata:
      labels:
        app: sample-python-app
    spec:
      containers:
      - name: python-app
        image: akhilprabhu2005/kube-service-python:v1
        env:
        - name: DB-Port
          valueFrom:
            configMapKeyRef:
              name: test-cm
              key: db-port
        ports:
        - containerPort: 8000
      imagePullSecrets:
      - name: my-registry-secret

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
* kubectl create secret docker-registry my-registry-secret \
  --docker-server=https://index.docker.io/v1/ \
  --docker-username=akhilprabhu2005 \
  --docker-password=Akhil@2005\
  --docker-email=akhilprabhu2005@gmail.com


* kubectl get secrets
* kubectl apply -f deployment.yml
* kubectl get deploy
* kubectl get pods -o wide



* kubectl exec -it sample-python-app-768bb9bbfd-mssss  -- /bin/bash

--* env grep | db


Add env thing in deployment file and apply the deployment we can see that old pods will be deleted and new ones will be  created.
If we change port of DB in cm.yaml by this we can't make change to deployment here we try to grep and get 3306 not the changed one. 
To overcome this we use volume mounts here instead of env variables we use file.

vim deployment.yaml
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

apiVersion: apps/v1
kind: Deployment
metadata:
  name: sample-python-app
  labels:
    app: sample-python-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: sample-python-app
  template:
    metadata:
      labels:
        app: sample-python-app
    spec:
      containers:
      - name: python-app
        image: akhilprabhu2005/kube-service-python:v1
	volumeMounts:
	 - name: db-connection
	   mountPath: /opt
        ports:
        - containerPort: 8000
      volumes:
	- name: db-connection
	  configMap:
	    name: test-cm	
      imagePullSecrets:
      - name: my-registry-secret



+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


* vim cm.ymal
change port to 3307

* kubectl apply -f cm.yml
* kubectl apply -f deployment.yml
* kubectl apply -f cm.yml
login to pod
* kubectl exec -it sample-python-app-8479575cf7-24rxg -- /bin/bash
* env | grep DB
now we have removed the env variables.
so we need to check the /opt
* ls /opt
* cat /opt/db-port | more
Now we can check the port change.

Behaviour of configmap and secrets are same.

SECRETS :
We have basically 2 types of secrets generic used for credentials and tls for certificates.
We can create secret by using secret.yaml as same as we create configmap, but this is the other way
* kubectl create secret generic test-secret --from-literal=db-port="3307"

